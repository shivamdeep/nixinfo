<?php

/***************** DO NOT EDIT THIS FILE *************************
******************************************************************

INFORMATION:
------------

This is a core theme file, you should not need to edit 
this file directly. Code changes maybe lost during updates.

LAST UPDATED: June 26th 2011
EDITED BY: MARK FAIL
------------------------------------------------------------------

******************************************************************/

class PremiumPressTheme_Import {



	function IMPORTSWITCH($period){

		global $wpdb;
	
		switch(strtolower(constant('PREMIUMPRESS_SYSTEM'))){
		

			case "shopperpress": {
				
				$this->amazon_dreepfeed($period);
				
				if(get_option('enabled_amazon_updater') == "yes"){ $this->AmazonAutoUpdaterTool(); }
		
			} break;
				
			case "auctionpress": {
		
			} break;
			
			case "directorypress": {
		
			} break;
		
			case "couponpress": {
			
				$this->ICODESIMPORT($period);			
			
			} break;
		
	
		}
		
		// LOOK FOR ITEMS WHICH START TODAY AND SET THEIR STATUS TO ACTIVE
		$this->MAKESTARTDATE();
	} 
	
	
/*************************** GENERAL **********************************************************/
		
function MAKESTARTDATE(){

	global $wpdb;
	
	$SQL = 'posts_per_page=50&meta_key=starts&meta_value='.date('Y-m-d'); //
	$post = query_posts($SQL);
	
	foreach($post as $p){
	
		$my_post 				= array();
		$my_post['ID'] 			= $p->ID;
		$my_post['post_status'] = "publish";
		wp_update_post( $my_post );
	
	}
	//Reset Query
	wp_reset_query();


}	
	
	
/*************************** COUPON PRESS **********************************************************/
	

function ICODESIMPORT($period="hourly",$debug=false){

	global $wpdb; $c=0; $counterA=0; $counterB=0; $page=0;
		 
	$data = get_option("icodes_savelist");
	 
	if(is_array($data)){
	
		foreach($data as $query){	 
		
			if( ( $query['Time'] == $period || $query['ID'] == $period ) || $debug ){ //  && ( $query['Page'] < $query['PageTotal']+1 )
		 
		 
				$QueryString  = get_option('icodes_country')."?";
				$QueryString .= "UserName=".get_option('icodes_subscription_username');
				$QueryString .= "&SubscriptionID=".get_option('icodes_subscriptionID');
				$QueryString .= "&RequestType=".$query['RequestType']."&Action=".$query['Action'];
				 
				if(strlen($query['ActionID']) > 0 && strlen($query['ActionID']) < 4){
				
				$QueryString .= "&Query=".$query['ActionID'];
				
				}else{
				
					$Continue = true;
					$list = get_option('icodes_merchantlist');
					if(is_array($list)){
					foreach($list as $cat){
					if($query['ActionID'] == $cat['id']){
					$Continue=false;
					$QueryString .= "&Query=".str_replace("_"," ",$cat['name_merchant']);
					}
					}
					 
				}
				
				}
				
				$QueryString .= get_option("icodes_Relationship")."&Page=".$query['Page']."&PageSize=".$query['PageSize'];
				if($debug){die("<h1>Query String</h1><p>".$QueryString."</p>");}
				
					//if($query['PageTotal'] > 0 && ( $query['Page']-1 == $query['PageTotal'] || $query['Page']-1 > $query['PageTotal'] ) ){
					
					//die("finished".$query['Page'].$query['PageTotal']);
					
					//}else{
					
						$xml = $this->GetIcodesData($QueryString,get_option('icodes_importtype'));
			 
						$counterA=0; $counterB=0; $pagec=0;
						$total_items += trim($xml->Results);
						$message1 = trim($xml->Message);
						if($message1==''){
							foreach ($xml->item as $item) {
							 
								if($this->ICODESADDCOUPON($item,$query['Map'],$query['RequestType'])){$counterA++;}else{ $counterB++;}
							}
							$pagec++;
						}
					//}			
			
			}
			
		
			// RESAVE THIS QUERY
			$cList[$c]['ID'] 			= $query['ID'];	
			$cList[$c]['RequestType'] 	= $query['RequestType'];
			$cList[$c]['Action'] 		= $query['Action'];
			$cList[$c]['ActionID'] 		= $query['ActionID'];
			$cList[$c]['Sort'] 			= $query['Sort'];	
			$cList[$c]['Map'] 			= $query['Map'];	
			$cList[$c]['Time'] 			= $query['Time'];	
			$cList[$c]['Page'] 			= $query['Page'];
			$cList[$c]['PageSize'] 		= $query['PageSize'];
			$cList[$c]['PageTotal'] 	= $query['PageTotal'];
			$cList[$c]['CountGood'] 	= $query['CountGood'];
			$cList[$c]['CountBad'] 		= $query['CountBad'];
			
			if( ( $query['Time'] == $period || $query['ID'] == $period ) || $debug ){
			
			// UPDATED ITEMS WHEN THIS IS RUN ONLY
			$cList[$c]['Page'] 			= $query['Page']+$pagec;
			if(isset($xml->TotalPages)){ $cList[$c]['PageTotal'] 	= str_replace("","",$xml->TotalPages); }else{  $cList[$c]['PageTotal'] 	= $query['PageTotal']; }
			$cList[$c]['CountGood'] 	= $query['CountGood']+$counterA;
			$cList[$c]['CountBad'] 		= $query['CountBad']+$counterB;		
			
			}	
			
			$c++;
			
			//die($QueryString.print_r($cList).$xml->TotalPages);
		}
		
		update_option("icodes_savelist",$cList);
		
		return $counterA+$counterB;
	
	}else{
	
	return 0;
	
	}
 

}


function ICODESADDCOUPON($cc,$cat=0,$type){

 	global $wpdb; $code = array();
	 
	 $dataArray = array('id','title','description','merchant','merchant_logo_url','merchant_id','program_id','voucher_code','excode','affiliate_url','merchant_url','icid','mid','network','deep_link','start_date','expiry_date','category','category_id');
	 
	 foreach($dataArray as $key){	 
	 	$code[$key] 		= str_replace("","",$cc->$key);	 
	 } 
 
	// GIVE THE COUPON AN ID TO REFERENCE ID
	$id = $code['icid'];
 
	// CHECK FOR DUPLICATES	
	$SQL = "SELECT count($wpdb->postmeta.meta_key) AS total
	FROM $wpdb->postmeta
	WHERE $wpdb->postmeta.meta_key='ID' AND $wpdb->postmeta.meta_value = '".$id."'	LIMIT 1";	
				 
	$result = mysql_query($SQL);			 
	$array = mysql_fetch_assoc($result);
			
	if($array['total'] == 0){ 
		
			 $my_post = array();
			 $my_post['post_title'] 	= $code['title'];
			 $my_post['post_content'] 	= $code['description'];
			 $my_post['post_excerpt'] 	= $code['description'];
			 $my_post['post_author'] 	= 1;
			 $my_post['post_status'] 	= get_option("icodes_import_status");
			 $my_post['post_category']  = array($cat);
			 //$my_post['tags_input'] = $dd1[0];
			 
			 $POSTID = wp_insert_post( $my_post );	  
					 
			if (strlen(stristr($type,"Codes"))>0) { $thetype = "coupon"; } else { $thetype = "offer"; }
					 
			 // EXTRA FIELDS
			 add_post_meta($POSTID, "ID", 		str_replace("!!aaqq","",$id));
			 add_post_meta($POSTID, "code", 	$code['voucher_code']);
			 add_post_meta($POSTID, "url", 		$code['merchant_url']);	  
			 add_post_meta($POSTID, "hits", 	"0");
			 add_post_meta($POSTID, "link", 	$code['affiliate_url']);	
			 add_post_meta($POSTID, "image", 	$code['merchant_logo_url']);
			 add_post_meta($POSTID, "featured", "no");
			 add_post_meta($POSTID, "type", 	$thetype);
			 
			 add_post_meta($POSTID, "starts", 	$code['start_date']);
			 add_post_meta($POSTID, "expires", $code['expiry_date']);
			  	
		
			return true;	
		
		 
	 }else{
	 
	 return false;	
	 
	 }
 
 return $POSTID;
}



function GetIcodesCateoryName($id=0,$type="Category"){

	global $wpdb;
	
	switch($type){
	case "Category": { $cat = get_option('icodes_categorylist');} break;
	case "Network": { $cat = get_option('icodes_networklist');} break;
	case "Merchant": { $cat = get_option('icodes_merchantlist');} break;
	default: { return $id; } break;		
	}

	

	foreach($cat as $d){
		if($d['id'] == $id){
			if($type =="Merchant"){
			return "<b>".$d['name_merchant']."</b>";
			}else{
			return "<b>".$d['name']."</b>";
			}
		}
	}
	
	return $id;
}










function GetIcodesData($QueryString, $httpRequest="CURL"){

	if($httpRequest == "CURL"){
	
		$ch = curl_init();
		$timeout = 0;  
		curl_setopt ($ch, CURLOPT_URL, $QueryString);
		curl_setopt ($ch, CURLOPT_RETURNTRANSFER, 1);
		curl_setopt ($ch, CURLOPT_CONNECTTIMEOUT, $timeout);
		$xml_raw  = curl_exec($ch);
		$xml = simplexml_load_string($xml_raw);
		curl_close($ch);
	
	}
	else{
	 
		$xml = simplexml_load_file($QueryString);
	
	}

	return $xml;
}	











/*************************** AMAZON UPDATE TOOL  ***************************************/
	function amazon_dreepfeed($ActionTime="hourly",$thisArray="") {

		global $wpdb;
		
		if(is_array($thisArray)){
		$ASS 						= $thisArray; 
		}else{
		$ASS 						= get_option("AmazonSavedSearch_Data");
		}
		$ACC						= 0;

		include_once(TEMPLATEPATH ."/admin/importtools/amazon_api_class.php");	
			
		$obj = new AmazonProductAPI();
 
		foreach($ASS as $SearchArray){
 
				if($SearchArray['time'] == $ActionTime){
 
					if($SearchArray['keyword'] != ""){		

						$importcounter 					= 0;
						$_POST['amazon'] 				= $SearchArray;
						$_POST['amazon']['keyword'] 	= $SearchArray['keyword'];
						$_POST['amazon']['keyword_cat'] = $SearchArray['keyword_cat'];
						$_POST['amazon']['cat'] 		= $SearchArray['cat'];
	
						try
						{
							$result = $obj->searchProducts($_POST['amazon']['keyword'],$_POST['amazon']['keyword_cat'],$_POST['amazon']);			
							$SEARCHSTATUS = "Running";		
						
							//print_r($result->Items->TotalResults);	 
					
						}
						catch(Exception $e)
						{
							$SEARCHSTATUS = "Finished (".$e->getMessage().")";
						}  

						$importcounter = AmazonSearchSave($result);						
 
					}else{

					$SEARCHSTATUS = "Finished (No Keyword Entered)";

					}			
			}

			foreach($SearchArray as $key => $val){
				if($key == "last" && ( $SearchArray['time'] == $ActionTime ) ) {
					$val = date('l jS \of F Y h:i:s A');
				}elseif($key == "total" && ( $SearchArray['time'] == $ActionTime ) ){
					$val += $importcounter;
				}elseif($key == "status" && ( $SearchArray['time'] == $ActionTime ) ){
					$val = $SEARCHSTATUS;
				}elseif($key == "start_page" && ( $SearchArray['time'] == $ActionTime ) ){
					if(!is_numeric($val)){ $val = 1; }else{ $val++; }
				}

				$ASS_NEW[$ACC][$key] 	= $val; 
			}
			$ACC++;
		}
	
		if(!is_array($thisArray)){ 
		
		update_option("AmazonSavedSearch_Data",$ASS_NEW); 
		
		}

}
	
function AmazonAutoUpdaterTool(){
	
		global $wpdb;
		
		$LASTID = get_option("amazon_updater_lastId"); $aa=0;
		
		if($LASTID ==""){ $LASTID=0; }
		$country = get_option('enabled_amazon_updater_country');
		if($country == ""){$country="com"; }
		$EXTRA = " AND $wpdb->posts.ID > ".$LASTID;
		
		$SQL = "SELECT $wpdb->posts.ID, $wpdb->postmeta.meta_value AS GUID FROM $wpdb->posts
		LEFT JOIN $wpdb->postmeta ON ($wpdb->postmeta.post_id =  $wpdb->posts.ID)
		WHERE $wpdb->postmeta.meta_key = 'amazon_guid' AND $wpdb->posts.post_status='publish'
		".$EXTRA."		 
		GROUP BY $wpdb->posts.ID 
		ORDER BY $wpdb->posts.ID ASC
		LIMIT 20";
		
		print "<div style='padding:10px; background:#efefef; border:1px solid #ddd; margin-bottom:40px;'>SQL: ".$SQL."</div>";
		
		print "<h2>Showing 20 per page, starting at post ID ".$LASTID."</h2><p>Refresh the page again to view the next 20</p>";

		$results = (array)$wpdb->get_results($SQL);
		
		if(is_array($results) && !empty($results)){		 
		
			include_once(TEMPLATEPATH ."/admin/importtools/amazon_api_class.php");		
		 
			foreach($results as $value){
			
			print "<div style='padding:10px; background:#e7ffcc; border:1px solid #88c446; margin-bottom:10px;'>Checking post ID ".$value->ID." (<a href='".get_bloginfo('url')."/?p=".$value->ID."' target='_blank'>view</a>)........";
			
			if(get_post_meta($value->ID, "amazon_noupdate", true) != "yes"){
			 
				$obj = new AmazonProductAPI();
					//die($value->GUID." ".$country);
				try {
					
					$item = $obj->getItemByAsin($value->GUID,$country);	
					
				} catch(Exception $e){
					
					mysql_query("UPDATE ".$wpdb->prefix."posts SET 	post_status='draft'		WHERE ".$wpdb->prefix."posts.ID='".$value->ID."' LIMIT 1"); 
			
					print str_replace("h1","span",$e->getMessage());
					$aa++;
					//return;
							
				} 
					
					 
					
								
					$val = $item->Items->Item;
					
				
										$data['old_price'] 		= "";
					$data['price']			= str_replace("!!aaqq","",$val->ItemAttributes->ListPrice->Amount);	 				
				
					if($data['price'] == ""){
						$data['price'] = str_replace("!!aaqq","",$val->OfferSummary->LowestNewPrice->Amount);
					}
					
					if(isset($val->Offers->Offer->OfferListing->Price->Amount) && strlen($val->Offers->Offer->OfferListing->Price->Amount) > 1){
					
							$data['old_price'] = $data['price'];
							$data['price'] 	=  str_replace("!!aaqq","",$val->Offers->Offer->OfferListing->Price->Amount);	
					}	
				 
					// Load price options
					if($country == "jp"){
					
					}else{
						$data['old_price'] = substr($data['old_price'],0, -2).".".substr($data['old_price'],-2);
						$data['price'] = substr($data['price'],0, -2).".".substr($data['price'],-2);
					}
		  
		  
				 
					if($data['price'] > 0){
					update_post_meta($value->ID, 'price', $data['price']); 
					}
					if($data['old_price'] > 0 && $data['old_price'] != $data['price']){
					update_post_meta($value->ID, 'old_price', $data['old_price']); 
					}
					
					
					
					print " price is ".$data['price'];
					if($data['old_price'] > 0 && $data['old_price'] != $data['price']){
					print " old price is ".$data['old_price'];
					}
					
					print " </div>";
					
			}else{
			
			print "No Update flag set, skipping product update.";
			
			
			}
					
				$aa++;
			
			}
			
			
			if($aa > 1){
			update_option("amazon_updater_lastId", $value->ID);
			}else{
			update_option("amazon_updater_lastId", "0");
			}
			
			
			
		
		}else{
			update_option("amazon_updater_lastId", 0);
		} 
		
		print "..finished";
	
	}	
 
  
}	

?>