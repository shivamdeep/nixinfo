<?php

/***************** DO NOT EDIT THIS FILE *************************
******************************************************************

INFORMATION:
------------

This is a core theme file, you should not need to edit 
this file directly. Code changes maybe lost during updates.

LAST UPDATED: 3rd April 2011
EDITED BY: MARK FAIL
------------------------------------------------------------------

******************************************************************/

class PremiumPressTheme_Function { 

 
function PageNavigation($return="") {


	global $wpdb, $wp_query;
	$return="";
	
	if (!is_single()) {
		$request = $wp_query->request;
		$posts_per_page = intval(get_query_var('posts_per_page'));
		$paged = intval(get_query_var('paged'));
	
		$pagenavi_options['pages_text'] = $GLOBALS['_LANG']['_pn1'];
		$pagenavi_options['current_text'] = "%PAGE_NUMBER%";
		$pagenavi_options['page_text'] = "%PAGE_NUMBER%";
		$pagenavi_options['first_text'] = $GLOBALS['_LANG']['_pn2'];
		$pagenavi_options['last_text'] = $GLOBALS['_LANG']['_pn3'];
		$pagenavi_options['prev_text'] = "";//"<<";
		$pagenavi_options['next_text'] = "";//">>";
		$pagenavi_options['dotleft_text'] = "";
		$pagenavi_options['dotright_text'] = "";
		$pagenavi_options['num_pages'] = "2";
		$pagenavi_options['num_larger_page_numbers'] = "3";
		$pagenavi_options['larger_page_numbers_multiple'] = "10";
		$pagenavi_options['always_show'] = "0";
		
 		 
		$numposts = $wp_query->found_posts;
		$max_page = $wp_query->max_num_pages;
		if(empty($paged) || $paged == 0) {
			$paged = 1;
		}
		
		$pages_to_show = intval(5);
		$larger_page_to_show = intval(1);
		$larger_page_multiple = intval(1);
		$pages_to_show_minus_1 = $pages_to_show - 1;
		$half_page_start = floor($pages_to_show_minus_1/2);
		$half_page_end = ceil($pages_to_show_minus_1/2);
		$start_page = $paged - $half_page_start;
		if($start_page <= 0) {
			$start_page = 1;
		}
		$end_page = $paged + $half_page_end;
		if(($end_page - $start_page) != $pages_to_show_minus_1) {
			$end_page = $start_page + $pages_to_show_minus_1;
		}
		if($end_page > $max_page) {
			$start_page = $max_page - $pages_to_show_minus_1;
			$end_page = $max_page;
		}
		if($start_page <= 0) {
			$start_page = 1;
		}
		$larger_per_page = $larger_page_to_show*$larger_page_multiple;
		$larger_start_page_start = ($this->n_round($start_page, 10) + $larger_page_multiple) - $larger_per_page;
		$larger_start_page_end = $this->n_round($start_page, 10) + $larger_page_multiple;
		$larger_end_page_start = $this->n_round($end_page, 10) + $larger_page_multiple;
		$larger_end_page_end = $this->n_round($end_page, 10) + ($larger_per_page);
		if($larger_start_page_end - $larger_page_multiple == $start_page) {
			$larger_start_page_start = $larger_start_page_start - $larger_page_multiple;
			$larger_start_page_end = $larger_start_page_end - $larger_page_multiple;
		}
		if($larger_start_page_start <= 0) {
			$larger_start_page_start = $larger_page_multiple;
		}
		if($larger_start_page_end > $max_page) {
			$larger_start_page_end = $max_page;
		}
		if($larger_end_page_end > $max_page) {
			$larger_end_page_end = $max_page;
		}
		if($max_page > 1 || intval(1) == 1) {
		
			$pages_text = str_replace("%CURRENT_PAGE%", number_format_i18n($paged), $pagenavi_options['pages_text']);
			$pages_text = str_replace("%TOTAL_PAGES%", number_format_i18n($max_page), $pages_text);
			
			
			
			 
					if(!empty($pages_text)) {
						$return .= '<li><a class="pages">'.$pages_text.'</a></li>';
					}
					if ($start_page >= 2 && $pages_to_show < $max_page) {
						$first_page_text = str_replace("%TOTAL_PAGES%", number_format_i18n($max_page), $pagenavi_options['first_text']);
						//$return .= '<a href="'.clean_url(get_pagenum_link()).'" class="first" title="'.$first_page_text.'">'.$first_page_text.'</a>';
						if(!empty($pagenavi_options['dotleft_text'])) {
							$return .= '<span class="extend">'.$pagenavi_options['dotleft_text'].'</span>';
						}
					}
					if($larger_page_to_show > 0 && $larger_start_page_start > 0 && $larger_start_page_end <= $max_page) {
						for($i = $larger_start_page_start; $i < $larger_start_page_end; $i+=$larger_page_multiple) {
							$page_text = str_replace("%PAGE_NUMBER%", number_format_i18n($i), $pagenavi_options['page_text']);
							$return .= '<a href="'.clean_url(get_pagenum_link($i)).'" class="page" title="'.$page_text.'">'.$page_text.'</a>';
						}
					}
					//previous_posts_link($pagenavi_options['prev_text']);
					for($i = $start_page; $i  <= $end_page; $i++) {						
						if($i == $paged) {
							$current_page_text = str_replace("%PAGE_NUMBER%", number_format_i18n($i), $pagenavi_options['current_text']);
							$return .= '<li><a class="current">'.$current_page_text.'</a></li>';
						} else {
							$page_text = str_replace("%PAGE_NUMBER%", number_format_i18n($i), $pagenavi_options['page_text']);
							$return .= '<li><a href="'.clean_url(get_pagenum_link($i)).'" class="page" title="'.$page_text.'">'.$page_text.'</a></li>';
						}
					}
					 
			 
			
			
			
		}
	}
	
	
	if($return){
	return $return;
	}else{
	echo $return;
	}
}
	 
 
function n_round($num, $tonearest) {
   return floor($num/$tonearest)*$tonearest;
}	


	function Pages($type=0,$span=false){
	
		global $wpdb;

		$STRING = "";
		$Pages = get_pages("parent=0&exclude=".get_option("excluded_pages"));
		$Page_Count = count($Pages);	
 			 
		foreach ($Pages as $Page) {		
			$STRING.= '<li><a href="'.get_page_link( $Page->ID ).'" title="'.$Page->post_title.'">';
			if($span){  $STRING.= '<span>';}
			$STRING .= $Page->post_title;
			if($span){  $STRING.= '</span>';}
			$STRING .= '</a>';

			if($type ==0){
				$inner_pages = get_pages('child_of='.$Page->ID.'&sort_column=post_date&sort_order=desc');
				$inner_pages_count = count($inner_pages);
	
				if($inner_pages_count > 0){
					$STRING .= '<ul>';
					foreach($inner_pages as $inner_page){
		
						$STRING.= '<li><a href="'.get_page_link( $inner_page->ID ).'" title="'.$inner_page->post_title.'">';
						//if($span){  $STRING.= '<span>';}
						$STRING .= $inner_page->post_title;
						//if($span){  $STRING.= '</span>';}
						$STRING .= '</a></li>';
		
					}
					$STRING .= '</ul>';
				}
			}
		$STRING .= '</li>';
		}		
		
		echo  $STRING;
	} 


	function auth_redirect_login() {

		global $wpdb;

		$user = wp_get_current_user();
		if ( $user->id == 0 ) {
			nocache_headers();
			wp_redirect(get_option('siteurl') . '/wp-login.php?redirect_to=' . urlencode($_SERVER['REQUEST_URI']));
			exit();
		}

	}
	
	
	
	
	function CategoryList($id=0,$showAll=false){

		global $wpdb;
		$showExtraPrice = 1;
	 $SHOWCATSID = "yes";
	 $CCode = get_option("currency_code");

		$catlist="";
 		$Maincategories = get_categories('use_desc_for_title=1&hide_empty=0&hierarchical=0&exclude='.str_replace("-","",$GLOBALS['directorypress']['excluded_articles']));		
		$Maincatcount = count($Maincategories);	 
		foreach ($Maincategories as $Maincat) { 
		if($Maincat->parent ==0){
		
			if(strlen($Maincat->cat_name) > 1){		


			if($showExtraPrice == 1){ $price  = get_option('CatPrice_'.$Maincat->cat_ID); }else{ $price  = ""; }
			if($price == ""){ $extra1 = ""; }else{ $extra1 = " + ".$CCode.$price; }			
 
 
			if($id == $Maincat->cat_ID){ $extra="selected"; }else{ $extra=""; }

			$catlist .= '<option value="'.$Maincat->cat_ID.'" '.$extra.'>';
			$catlist .= $Maincat->cat_name;
			if($SHOWCATSID == "yes"){ $catlist .= " (".$Maincat->count.')'; }
			$catlist .= $extra1."";
			$catlist .=  '</option>';
				
				$currentcat=get_query_var('cat');
				$categories= get_categories('child_of='.$Maincat->cat_ID.'&amp;depth=1&hide_empty=0'); 
				$catcount = count($categories);		
				$i=1;
 
				if(count($categories) > 0){
				$catlist .="<ul>";
					foreach ($categories as $cat) {		
					
					if($showExtraPrice == 1){ $price  = get_option('CatPrice_'.$cat->cat_ID); }else{ $price  = ""; }
					if($price == ""){ $extra1 = ""; }else{ $extra1 = " + ".$CCode.$price; }	

					 if($cat->cat_ID == $id){ $extra ="selected"; }else{ $extra =""; }

						$catlist .= '<option value="'.$cat->cat_ID.'" '.$extra.'> ---> ';
						$catlist .= $cat->cat_name;
						$catlist .= $extra1.'</option>';
						 
						$i++;		
					}
				 
				}		
		} }
 }

return $catlist;


	}




 

}	

?>