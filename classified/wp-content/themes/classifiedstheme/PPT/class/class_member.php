<?php

/***************** DO NOT EDIT THIS FILE *************************
******************************************************************

INFORMATION:
------------

This is a core theme file, you should not need to edit 
this file directly. Code changes maybe lost during updates.

LAST UPDATED: June 26th 2011
EDITED BY: MARK FAIL
------------------------------------------------------------------

******************************************************************/

class PremiumPress_Membership {

var $total =0;

	/* ====================== QUERY FUNCTIONS ====================== */
	
		function SQuery() {
	
			global $wpdb;
	
			foreach($_GET as $k => $v) {
				$$k = $v;
			}
			$sort = empty($sort) ? "premiumpress_subscriptions.ID" : $sort;
			$order = empty($order) ? "asc" : $order;
			$s = strval($this->s*$GLOBALS['results_per_page']);
			$e = $GLOBALS['results_per_page'];
	
			
			$q = "select premiumpress_subscriptions.*, premiumpress_packages.package_name from premiumpress_subscriptions LEFT JOIN premiumpress_packages ON (premiumpress_packages.ID = premiumpress_subscriptions.package_ID ) WHERE premiumpress_subscriptions.ID !='' $h order by $sort $order limit $s,$e";
	
			$tq = "select COUNT(distinct ID) from premiumpress_subscriptions where 1 = 1 $h";
			
	
			$this->r = $wpdb->get_results($q);
			$this->total = intval($wpdb->get_var($tq));
			return $this->r;
		}

		function EQuery($g=false) {

			global $wpdb;
	
			foreach($_GET as $k => $v) {
				$$k = $v;
			}
			$sort = empty($sort) ? "email_interval" : $sort;
			$order = empty($order) ? "asc" : $order;
			$s = strval($this->s*$GLOBALS['results_per_page']);
			$e = $GLOBALS['results_per_page'];

			if($sort == "email_interval"){ $h = "AND email_parent=0"; }
			if($sort == "email_parent"){ $sort = "email_interval"; $h = "AND email_parent=".$_GET['id']; }



			$q = "select * from premiumpress_emails where ID !='' $h order by $sort $order limit $s,$e";
	
			$tq = "select COUNT(distinct ID) from premiumpress_emails where 1 = 1 $h";	
 
			$this->r = $wpdb->get_results($q);
			$this->total = intval($wpdb->get_var($tq));
			return $this->r;
		}


		function FQuery() {

			global $wpdb;
	
			foreach($_GET as $k => $v) {
				$$k = $v;
			}
			$sort = empty($sort) ? "ID" : $sort;
			$order = empty($order) ? "asc" : $order;
			$s = strval($this->s*$GLOBALS['results_per_page']);
			$e = $GLOBALS['results_per_page'];
	
			$q = "select * from premiumpress_files where ID !='' $h order by $sort $order limit $s,$e";
			$tq = "select COUNT(distinct ID) from premiumpress_files where 1 = 1 $h";
			
	 
			$this->r = $wpdb->get_results($q);
			$this->total = intval($wpdb->get_var($tq));
			return $this->r;
		}

	function PQuery($g=false) {

		global $wpdb;

		foreach($_GET as $k => $v) {
			$$k = $v;
		}
		$sort = empty($sort) ? "package_price" : $sort;
		$order = empty($order) ? "DESC" : $order;
		$s = strval($this->s*$GLOBALS['results_per_page']);
		$e = $GLOBALS['results_per_page'];


		$q = "select * from premiumpress_packages where ID !='' $h order by $sort $order limit $s,$e";

		$tq = "select COUNT(distinct ID) from premiumpress_packages where 1 = 1 $h";		
 
		$this->r = $wpdb->get_results($q);
		$this->total = intval($wpdb->get_var($tq));
		return $this->r;
	}

	function MQuery() {

		global $wpdb; $h =""; $type =""; $w ="";

		foreach($_GET as $k => $v) {
			$$k = $v;
		}
		$sort = empty($sort) ? "last_name" : $sort;
		$order = empty($order) ? "asc" : $order;
		$s = strval($this->s*$GLOBALS['results_per_page']);
		$e = $GLOBALS['results_per_page'];

		if(empty($query)) {

			if(in_array($sort,$GLOBALS['user_fields'])) {
				$q = "select distinct ID from $wpdb->users where 1 = 1 $h order by $sort $order limit $s,$e";
			}
			else {
				$q = "select distinct ID from $wpdb->users left join $wpdb->usermeta on ($wpdb->users.ID = $wpdb->usermeta.user_id and $wpdb->usermeta.meta_key = '".$sort."') where 1 = 1 $h order by $wpdb->usermeta.meta_value $order limit $s,$e";
			}
			$tq = "select COUNT(distinct ID) from $wpdb->users where 1 = 1 $h";
		}
		elseif(!empty($by)) {
			if(in_array($by,$GLOBALS['user_fields'])) {
				if(in_array($sort,$GLOBALS['user_fields'])) {
					$q = "select distinct ID from $wpdb->users where instr($by,'$query') != 0 $h order by $sort $order limit $s,$e";
				}
				else {
					$q = "select distinct ID from $wpdb->users left join $wpdb->usermeta on ($wpdb->users.ID = $wpdb->usermeta.user_id and $wpdb->usermeta.meta_key = '$sort') where instr($wpdb->users.$by,'$query') != 0 $h order by $wpdb->usermeta.meta_value $order limit $s,$e";
				}
				$tq = "select COUNT(distinct ID) from $wpdb->users where instr($by,'$query') != 0 $h";
			}
			else {
				if(in_array($sort,$GLOBALS['user_fields'])) {
					$h = !empty($o['hidden']) ? " and $wpdb->users.ID NOT IN (".implode(',',$o['hidden']).")" : '';
					$q = "select distinct $wpdb->users.ID from $wpdb->users join $wpdb->usermeta on ($wpdb->users.ID = $wpdb->usermeta.user_id) where $wpdb->usermeta.meta_key = '$by' and instr($wpdb->usermeta.meta_value,'$query') != 0 $h order by $wpdb->users.$sort $order limit $s,$e";
				}
				else {
					$h = !empty($o['hidden']) ? " and t1.user_id NOT IN (".implode(',',$o['hidden']).")" : '';
					$q = "select distinct t1.user_id from $wpdb->usermeta as t1, $wpdb->usermeta as t2 where t1.user_id = t2.user_id and t1.meta_key = '$by' and instr(t1.meta_value,'$query') != 0 and t2.meta_key='$sort' $h order by t2.meta_value $order limit $s,$e";
				}
				$h = !empty($o['hidden']) ? " and user_id NOT IN (".implode(',',$o['hidden']).")" : '';
				$tq = "select COUNT(distinct user_id) from $wpdb->usermeta where meta_key = '$by' and instr(meta_value,'$query') != 0 $h";
			}
		}
		else {
			if($type == 'alpha') {
				if(in_array($sort,$GLOBALS['user_fields'])) {
					$h = !empty($o['hidden']) ? " and $wpdb->users.ID NOT IN (".implode(',',$o['hidden']).")" : '';
					$q = "select distinct $wpdb->users.ID from $wpdb->users join $wpdb->usermeta on ($wpdb->users.ID = $wpdb->usermeta.user_id) where $wpdb->usermeta.meta_key = 'first_name' and SUBSTRING(LOWER($wpdb->usermeta.meta_value),1,1) = '$query' $h order by $wpdb->users.$sort $order limit $s,$e";
				}
				else {
					$h = !empty($o['hidden']) ? " and t1.user_id NOT IN (".implode(',',$o['hidden']).")" : '';
					$q = "select distinct t1.user_id from $wpdb->usermeta as t1, $wpdb->usermeta as t2 where t1.user_id = t2.user_id and t1.meta_key = 'first_name' and SUBSTRING(LOWER(t1.meta_value),1,1) = '$query' and t2.meta_key='".$sort."' $h order by t2.meta_value $order limit $s,$e";
				}
				$h = !empty($o['hidden']) ? " and user_id NOT IN (".implode(',',$o['hidden']).")" : '';
				$tq = "select COUNT(distinct user_id) from $wpdb->usermeta where meta_key = 'first_name' and SUBSTRING(UPPER($wpdb->usermeta.meta_value),1,1) = '$query' $h";
			}
			else {
				$c = 1;
				$a = array_merge($GLOBALS['meta_fields'],$GLOBALS['meta_fields']);
				foreach($a as $v) {
					$w .= empty($w) ? " t2.meta_key = '$v'" : " or t2.meta_key = '$v'";
				}
				foreach($GLOBALS['members_fields'] as $v) {
					$x .= empty($x) ? " instr($wpdb->users.$v,'$query') != 0 " : " or instr($wpdb->users.$v,'$query') != 0 ";
				}
				$h = !empty($o['hidden']) ? " and $wpdb->users.ID NOT IN (".implode(',',$o['hidden']).")" : '';
				if(in_array($sort,$GLOBALS['user_fields'])) {
					
					$q = "select distinct $wpdb->users.ID from $wpdb->users left join $wpdb->usermeta as t2 on ($wpdb->users.ID = t2.user_id) where 1=1 and( (($w) and instr(t2.meta_value,'$query') != 0) or ($x) ) $h order by $wpdb->users.$sort $order limit $s,$e";
				}
				else {
					$q = "select distinct $wpdb->users.ID from $wpdb->users left join $wpdb->usermeta as t1 on ($wpdb->users.ID = t1.user_id and t1.meta_key='$sort') left join $wpdb->usermeta as t2 on ($wpdb->users.ID = t2.user_id) where 1=1 and( (($w) and instr(t2.meta_value,'$query') != 0) or ($x) ) $h order by t1.meta_value $order limit $s,$e";
				}
				$tq = "select COUNT(distinct $wpdb->users.ID) from $wpdb->users left join $wpdb->usermeta as t2 on ($wpdb->users.ID = t2.user_id) where 1=1 and( (($w) and instr(t2.meta_value,'$query') != 0) or ($x) ) $h";
			}
		}
 

		$this->r = $wpdb->get_col($q);
		$this->total = intval($wpdb->get_var($tq));
		return $this->r;
	}
	
	/* ============================================================= */


	function pagination($link='') {		
		
		$b = $_GET['by'];
		$t = $_GET['type'];
		$this->scope();

		if($this->n > 1) {
			$s = $this->p-2;
			$e = ($s+4)>$this->n ? $this->n : $s+4;
			if($s <= 0) {
				$s = 1;
				$e = ($s+4)>$this->n ? $this->n : $s+4;
			}
			elseif(($this->p+2) > $this->n) {
				$e = $this->n;
				$s = ($e-4)<=0 ? 1 : $e-4;
			}
			$sort = empty($_GET['sort']) ? "ID" : $_GET['sort'];
			$order = empty($_GET['order']) ? "asc" : $_GET['order'];
			for($i=$s;$i<=$e;$i++) {
				$h = $link.'&p='.($i).'&query='.$q.'&by='.$b.'&type='.$t.'&sort='.$sort.'&order='.$order;
				$c = intval($this->s+1) == $i ? ' class="active"' : '';
				$r .= '<li'.$c.'><a href="' . $h . '">' . $i . '</a></li>';
			}
			if($this->s > 0) {
				$r = '<li><a href="'.$link.'&p='.intval($this->s).'&query='.$q.'&by='.$b.'&type='.$t.'&sort='.$sort.'&order='.$order.'">Previous</a></li>'.$r;
			}
			if($this->total > (($this->s*$GLOBALS['results_per_page'])+$GLOBALS['results_per_page'])) {
				$r .= '<li><a href="'.$link.'&p='.intval($this->s+2).'&query='.$q.'&by='.$b.'&type='.$t.'&sort='.$sort.'&order='.$order.'">Next</a></li>';
				$r .= '<li><a href="'.$link.'&p='.$this->n.'&query='.$q.'&by='.$b.'&type='.$t.'&sort='.$sort.'&order='.$order.'">Last</a></li>';
			}
			$r = $this->s > 0 ? '<li><a href="'.$link.'&p=1&query='.$q.'&by='.$b.'&type='.$t.'&sort='.$sort.'&order='.$order.'">First</a></li>'.$r : $r;
			$r = '<ul>' . $r . '</ul>';
		}		 
		return $r;
	}

	function alpha($link="") {
	if(!isset($_GET['query'])){ $_GET['query']=""; }
	$c="";
		$a = array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');
		$r = '<ul>';
		foreach($a as $v) {
			$c="";
			if($v == $_GET['query']) {
				$c = 'class="PremiumPress_Members_AlphaSearch_Selected"';
			}
			$r .= '<li '.$c.'><a href="'.$link.'&p=1&query='.$v.'&type=alpha&sort=first_name">'.strtoupper($v).'</a></li>';
		}
		$r .= '</ul>';		

		return $r;
	}

	function viewing($link) {		 
		
		$this->scope();
		$ThisPage = $_GET['p'] > 0 ? $_GET['p'] : '1';
		$v = $this->e > 0 ? ($this->e) : '1';
		$r = "";
		if($this->total > 0){
			$r .= 'Viewing Page <b>' . $ThisPage . '</b>';
		}
		$r .= ' ('.$this->total.' members found)'; 
		$r .= $this->pagination($link);	
		 	
		return $r;
	}

	function scope() {
		$this->p = empty($_GET['p']) ? 1 : $_GET['p'];
		$this->n = ceil($this->total/$GLOBALS['results_per_page']);
		$this->s = intval($this->p-1);
		if(empty($this->s)) {
			$this->s = 0;
		}
		elseif($this->n > 0 and $this->s >= $this->n) {
			$this->s = ($this->n-1);
		}
		$this->e = $this->total > (($this->s*$GLOBALS['results_per_page'])+$GLOBALS['results_per_page']) ? (($this->s*$GLOBALS['results_per_page'])+$GLOBALS['results_per_page']) : $this->total;

	}

	function selectPaired($i='',$n='',$t='',$c='',$sv='',$f=array(),$j='',$m=false) {
		$o="";
		foreach($GLOBALS['members_fields'] as $k => $v) {
			$s = in_array($v,$f) ? ' selected ' : '';
			$k = empty($k) ? $v : $k;
			$o .= '<option value="' . $v . '"' . $s . '>' . $k . '</option>';
		}
		$os = $this->compileSelect($j,$i,$n,$t,$c,$sv,$o,$m);
		return $os;
	}
	function compileSelect($j,$i,$n,$t,$c,$sv,$o,$m) {
		$j = !empty($j) ? 'onChange="' . $j . '"' : "";
		$m = $m ? ' multiple ' : '';
		
		$sv = $sv==='' ? "select" : $sv;
		$s = $sv ? '<option value="">' . $sv . '</option>' : '';
		
		$os = '<select ' . $j . ' name="' . $n . '" id="' . $i . '" class="' . $c . '" title="' . $t . '"' . $m . '>' . $s . $o . '</select>';
		return $os;
	}


	function FileSize($size_in_bytes, $size_in = 'MB')
	{
	 
	if($size_in == 'B')
	{
	$size = $size_in_bytes;
	$precision = 0;
	}
	elseif($size_in == 'KB')
	{
	$size = (($size_in_bytes / 1024));
	$precision = 2;
	}
	elseif($size_in == 'MB')
	{
	$size = (($size_in_bytes / 1024) / 1024);
	$precision = 2;
	}
	elseif($size_in == 'GB')
	{
	$size = (($size_in_bytes / 1024) / 1024) / 1024;
	$precision = 2;
	}
	
	$size = round($size, $precision);
	
		return $size.' '.$size_in;
	}



/* ======================== SUBSCRIPTION FUNCTIONS ======================== */



function MySubscriptions($userID){

	global $wpdb;

		$subscriptions = $wpdb->get_results("SELECT * FROM premiumpress_subscriptions WHERE user_login ");
 
		foreach ($emails as $email){
 
			if($email->ID == $current){
				$STRING .= "<option value='".$email->ID."' selected>".$email->email_title."</option>";
			}else{
				$STRING .= "<option value='".$email->ID."'>".$email->email_title."</option>";
			}			
		}

		return $STRING;
}

/* ======================== PACKAGE FUNCTIONS ======================== */

function packages($current, $isArray=false){

	global $wpdb;
	
	if($isArray){
	$newlist = explode(",",$current);
	}
 
		$packages = $wpdb->get_results("SELECT * FROM premiumpress_packages");
 
		foreach ($packages as $package){
 
			if( !$package->ID == $current || in_array($package->ID,$newlist) ){
				$STRING .= "<option value='".$package->ID."' selected>".$package->package_name."</option>";
			}else{
				$STRING .= "<option value='".$package->ID."'>".$package->package_name."</option>";
			}			
		}

		return $STRING;

}

/* ======================== EMAIL FUNCTIONS ======================== */

	function collections($current="",$type="='collection'"){
	
	global $wpdb;

		$STRING ="";
		$emails = $wpdb->get_results("SELECT * FROM premiumpress_emails WHERE email_type ".$type);
 
		foreach ($emails as $email){
 
			if($email->ID == $current){
				$STRING .= "<option value='".$email->ID."' selected>".stripslashes($email->email_title)."</option>";
			}else{
				$STRING .= "<option value='".$email->ID."'>".stripslashes($email->email_title)."</option>";
			}			
		}

	return $STRING;
	
	}
 

	function WhichCollection($collections,$thisone){

	global $wpdb;	$STRING ="-----";
 
	foreach($collections as $collection){
		if($collection->ID == $thisone){
		$STRING = $collection->email_title;
		}
	}		

	return $STRING;
	
	}


}
 








 
?>